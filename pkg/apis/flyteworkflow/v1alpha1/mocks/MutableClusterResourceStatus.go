// Code generated by mockery v1.0.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MutableClusterResourceStatus is an autogenerated mock type for the MutableClusterResourceStatus type
type MutableClusterResourceStatus struct {
	mock.Mock
}

type MutableClusterResourceStatus_GetBarrierClockTick struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetBarrierClockTick) Return(_a0 uint32) *MutableClusterResourceStatus_GetBarrierClockTick {
	return &MutableClusterResourceStatus_GetBarrierClockTick{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetBarrierClockTick() *MutableClusterResourceStatus_GetBarrierClockTick {
	c_call := _m.On("GetBarrierClockTick")
	return &MutableClusterResourceStatus_GetBarrierClockTick{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetBarrierClockTickMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetBarrierClockTick {
	c_call := _m.On("GetBarrierClockTick", matchers...)
	return &MutableClusterResourceStatus_GetBarrierClockTick{Call: c_call}
}

// GetBarrierClockTick provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetBarrierClockTick() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type MutableClusterResourceStatus_GetLastPhaseUpdatedAt struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetLastPhaseUpdatedAt) Return(_a0 time.Time) *MutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	return &MutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetLastPhaseUpdatedAt() *MutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	c_call := _m.On("GetLastPhaseUpdatedAt")
	return &MutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetLastPhaseUpdatedAtMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetLastPhaseUpdatedAt {
	c_call := _m.On("GetLastPhaseUpdatedAt", matchers...)
	return &MutableClusterResourceStatus_GetLastPhaseUpdatedAt{Call: c_call}
}

// GetLastPhaseUpdatedAt provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetLastPhaseUpdatedAt() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

type MutableClusterResourceStatus_GetPhase struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetPhase) Return(_a0 int) *MutableClusterResourceStatus_GetPhase {
	return &MutableClusterResourceStatus_GetPhase{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetPhase() *MutableClusterResourceStatus_GetPhase {
	c_call := _m.On("GetPhase")
	return &MutableClusterResourceStatus_GetPhase{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetPhaseMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetPhase {
	c_call := _m.On("GetPhase", matchers...)
	return &MutableClusterResourceStatus_GetPhase{Call: c_call}
}

// GetPhase provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetPhase() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type MutableClusterResourceStatus_GetPhaseVersion struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetPhaseVersion) Return(_a0 uint32) *MutableClusterResourceStatus_GetPhaseVersion {
	return &MutableClusterResourceStatus_GetPhaseVersion{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetPhaseVersion() *MutableClusterResourceStatus_GetPhaseVersion {
	c_call := _m.On("GetPhaseVersion")
	return &MutableClusterResourceStatus_GetPhaseVersion{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetPhaseVersionMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetPhaseVersion {
	c_call := _m.On("GetPhaseVersion", matchers...)
	return &MutableClusterResourceStatus_GetPhaseVersion{Call: c_call}
}

// GetPhaseVersion provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetPhaseVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type MutableClusterResourceStatus_GetPluginState struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetPluginState) Return(_a0 []byte) *MutableClusterResourceStatus_GetPluginState {
	return &MutableClusterResourceStatus_GetPluginState{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetPluginState() *MutableClusterResourceStatus_GetPluginState {
	c_call := _m.On("GetPluginState")
	return &MutableClusterResourceStatus_GetPluginState{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetPluginStateMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetPluginState {
	c_call := _m.On("GetPluginState", matchers...)
	return &MutableClusterResourceStatus_GetPluginState{Call: c_call}
}

// GetPluginState provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetPluginState() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type MutableClusterResourceStatus_GetPluginStateVersion struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_GetPluginStateVersion) Return(_a0 uint32) *MutableClusterResourceStatus_GetPluginStateVersion {
	return &MutableClusterResourceStatus_GetPluginStateVersion{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnGetPluginStateVersion() *MutableClusterResourceStatus_GetPluginStateVersion {
	c_call := _m.On("GetPluginStateVersion")
	return &MutableClusterResourceStatus_GetPluginStateVersion{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnGetPluginStateVersionMatch(matchers ...interface{}) *MutableClusterResourceStatus_GetPluginStateVersion {
	c_call := _m.On("GetPluginStateVersion", matchers...)
	return &MutableClusterResourceStatus_GetPluginStateVersion{Call: c_call}
}

// GetPluginStateVersion provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) GetPluginStateVersion() uint32 {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	return r0
}

type MutableClusterResourceStatus_IsDirty struct {
	*mock.Call
}

func (_m MutableClusterResourceStatus_IsDirty) Return(_a0 bool) *MutableClusterResourceStatus_IsDirty {
	return &MutableClusterResourceStatus_IsDirty{Call: _m.Call.Return(_a0)}
}

func (_m *MutableClusterResourceStatus) OnIsDirty() *MutableClusterResourceStatus_IsDirty {
	c_call := _m.On("IsDirty")
	return &MutableClusterResourceStatus_IsDirty{Call: c_call}
}

func (_m *MutableClusterResourceStatus) OnIsDirtyMatch(matchers ...interface{}) *MutableClusterResourceStatus_IsDirty {
	c_call := _m.On("IsDirty", matchers...)
	return &MutableClusterResourceStatus_IsDirty{Call: c_call}
}

// IsDirty provides a mock function with given fields:
func (_m *MutableClusterResourceStatus) IsDirty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetLastPhaseUpdatedAt provides a mock function with given fields: updatedAt
func (_m *MutableClusterResourceStatus) SetLastPhaseUpdatedAt(updatedAt time.Time) {
	_m.Called(updatedAt)
}

// SetPhase provides a mock function with given fields: phase
func (_m *MutableClusterResourceStatus) SetPhase(phase int) {
	_m.Called(phase)
}

// SetPhaseVersion provides a mock function with given fields: version
func (_m *MutableClusterResourceStatus) SetPhaseVersion(version uint32) {
	_m.Called(version)
}

// SetPluginState provides a mock function with given fields: _a0
func (_m *MutableClusterResourceStatus) SetPluginState(_a0 []byte) {
	_m.Called(_a0)
}

// SetPluginStateVersion provides a mock function with given fields: _a0
func (_m *MutableClusterResourceStatus) SetPluginStateVersion(_a0 uint32) {
	_m.Called(_a0)
}
